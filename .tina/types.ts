// DO NOT MODIFY THIS FILE. This file is automatically generated by Forestry
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  JSON: any;
  JSONObject: any;
};

export type Index_DocumentUnion = Index;

export type Index_DocumentNode = {
  __typename?: 'Index_DocumentNode';
  section?: Maybe<SectionUnion>;
  path?: Maybe<Scalars['String']>;
  relativePath?: Maybe<Scalars['String']>;
  breadcrumbs?: Maybe<Array<Maybe<Scalars['String']>>>;
  basename?: Maybe<Scalars['String']>;
  extension?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  node?: Maybe<Index_DocumentUnion>;
};


export type Index_DocumentNodeBreadcrumbsArgs = {
  excludeExtension?: Maybe<Scalars['Boolean']>;
};



export type Query = {
  __typename?: 'Query';
  getIndexDocument?: Maybe<Index_DocumentNode>;
  getIndexDocuments?: Maybe<Array<Maybe<Index_DocumentNode>>>;
  document?: Maybe<DocumentNode>;
  documents?: Maybe<Array<Maybe<DocumentNode>>>;
  getSections?: Maybe<Array<Maybe<SectionUnion>>>;
  getSection?: Maybe<SectionUnion>;
  documentList?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentListBySection?: Maybe<Array<Maybe<DocumentNode>>>;
  media?: Maybe<Scalars['String']>;
  mediaList?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryGetIndexDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryGetIndexDocumentsArgs = {
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
  section?: Maybe<Scalars['String']>;
};


export type QueryDocumentsArgs = {
  section?: Maybe<Scalars['String']>;
};


export type QueryGetSectionArgs = {
  section?: Maybe<Scalars['String']>;
};


export type QueryDocumentListArgs = {
  directory?: Maybe<Scalars['String']>;
};


export type QueryDocumentListBySectionArgs = {
  section?: Maybe<Scalars['String']>;
};


export type QueryMediaArgs = {
  path?: Maybe<Scalars['String']>;
};


export type QueryMediaListArgs = {
  directory?: Maybe<Scalars['String']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  updateDocument?: Maybe<DocumentNode>;
  addPendingDocument?: Maybe<DocumentNode>;
};


export type MutationUpdateDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
  section?: Maybe<Scalars['String']>;
  params?: Maybe<DocumentInput>;
};


export type MutationAddPendingDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
  section?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['String']>;
};

export type Index_InputData = {
  title?: Maybe<Scalars['String']>;
};

export type Index_Input = {
  data?: Maybe<Index_InputData>;
  content?: Maybe<Scalars['String']>;
};

export type DocumentInput = {
  Index_Input?: Maybe<Index_Input>;
};

export type TextField = {
  __typename?: 'TextField';
  name?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
};

export type Index_FormFields = TextField;

export type Index_Form = {
  __typename?: 'Index_Form';
  label?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  fields?: Maybe<Array<Maybe<Index_FormFields>>>;
};

export type Index_Data = {
  __typename?: 'Index_Data';
  title?: Maybe<Scalars['String']>;
};

export type Index_InitialValues = {
  __typename?: 'Index_InitialValues';
  title?: Maybe<Scalars['String']>;
};

export type Index = {
  __typename?: 'Index';
  form?: Maybe<Index_Form>;
  data?: Maybe<Index_Data>;
  initialValues?: Maybe<Index_InitialValues>;
};

export type DocumentUnion = Index;

export type DocumentNode = {
  __typename?: 'DocumentNode';
  section?: Maybe<SectionUnion>;
  path?: Maybe<Scalars['String']>;
  relativePath?: Maybe<Scalars['String']>;
  breadcrumbs?: Maybe<Array<Maybe<Scalars['String']>>>;
  basename?: Maybe<Scalars['String']>;
  extension?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentUnion>;
};


export type DocumentNodeBreadcrumbsArgs = {
  excludeExtension?: Maybe<Scalars['Boolean']>;
};

export type SectionUnion = {
  __typename?: 'SectionUnion';
  type?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  create?: Maybe<Scalars['String']>;
  match?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<DocumentNode>>>;
};

export type Index_DocumentNodeUnion = Index;

export type Index_Section = {
  __typename?: 'Index_Section';
  path?: Maybe<Scalars['String']>;
  relativePath?: Maybe<Scalars['String']>;
  breadcrumbs?: Maybe<Array<Maybe<Scalars['String']>>>;
  basename?: Maybe<Scalars['String']>;
  extension?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  node?: Maybe<Index_DocumentNodeUnion>;
};


export type Index_SectionBreadcrumbsArgs = {
  excludeExtension?: Maybe<Scalars['Boolean']>;
};

export type DocumentNodeUnion = Index_Section;

